import * as cartModule from "./modules/cart";
import * as categoryModule from "./modules/category";
import * as contentModule from "./modules/content";
import * as currencyModule from "./modules/currency";
import * as customerModule from "./modules/customer";
import * as itemModule from "./modules/item";
import * as orderModule from "./modules/order";
import * as paymentModule from "./modules/payment";
import * as rmaModule from "./modules/rma";
import * as shippingModule from "./modules/shipping";
import * as supplierModule from "./modules/supplier";
import * as voucherModule from "./modules/voucher";
import * as warehouseModule from "./modules/warehouse";
import { InitOptions } from "./shared";
export declare class NetoAPI {
    item: {
        add: (data: any) => itemModule.AddItem;
        get: (filter: any) => itemModule.GetItem;
        update: (data: any) => itemModule.UpdateItem;
    };
    order: {
        add: (data: any) => orderModule.AddOrder;
        get: (filter: any) => orderModule.GetOrder;
        update: (data: any) => orderModule.UpdateOrder;
    };
    customer: {
        add: (data: any) => customerModule.AddCustomer;
        get: (filter: any) => customerModule.GetCustomer;
        update: (data: any) => customerModule.UpdateCustomer;
        addLog: (data: any) => customerModule.AddCustomerLog;
        updateLog: (data: any) => customerModule.UpdateCustomerLog;
    };
    category: {
        add: (data: any) => categoryModule.AddCategory;
        get: (filter: any) => categoryModule.GetCategory;
        update: (data: any) => categoryModule.UpdateCategory;
    };
    content: {
        add: (data: any) => contentModule.AddContent;
        get: (filter: any) => contentModule.GetContent;
        update: (data: any) => contentModule.UpdateContent;
    };
    cart: {
        get: (filter: any) => cartModule.GetCart;
    };
    supplier: {
        add: (data: any) => supplierModule.AddSupplier;
        get: (filter: any) => supplierModule.GetSupplier;
        update: (data: any) => supplierModule.UpdateSupplier;
    };
    voucher: {
        add: (data: any) => voucherModule.AddVoucher;
        get: (filter: any) => voucherModule.GetVoucher;
        update: (data: any) => voucherModule.UpdateVoucher;
    };
    warehouse: {
        add: (data: any) => warehouseModule.AddWarehouse;
        get: (filter: any) => warehouseModule.GetWarehouse;
        update: (data: any) => warehouseModule.UpdateWarehouse;
    };
    rma: {
        add: (data: any) => rmaModule.AddRma;
        get: (filter: any) => rmaModule.GetRma;
    };
    shipping: {
        getMethods: () => shippingModule.GetShippingMethods;
        getQuote: (data: any) => shippingModule.GetShippingQuote;
    };
    currency: {
        getSettings: () => currencyModule.GetCurrencySettings;
        updateSettings: (data: any) => currencyModule.UpdateCurrencySettings;
    };
    payment: {
        getMethods: () => paymentModule.GetPaymentMethods;
        get: (filter: any) => paymentModule.GetPayment;
        add: (data: any) => paymentModule.AddPayment;
    };
    constructor(options: InitOptions);
}
